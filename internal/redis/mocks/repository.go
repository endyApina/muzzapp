// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v9 "github.com/redis/go-redis/v9"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// AddLike provides a mock function with given fields: ctx, recipientID, actorID, timestamp
func (_m *Repository) AddLike(ctx context.Context, recipientID string, actorID string, timestamp int64) error {
	ret := _m.Called(ctx, recipientID, actorID, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for AddLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) error); ok {
		r0 = rf(ctx, recipientID, actorID, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_AddLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLike'
type Repository_AddLike_Call struct {
	*mock.Call
}

// AddLike is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - actorID string
//   - timestamp int64
func (_e *Repository_Expecter) AddLike(ctx interface{}, recipientID interface{}, actorID interface{}, timestamp interface{}) *Repository_AddLike_Call {
	return &Repository_AddLike_Call{Call: _e.mock.On("AddLike", ctx, recipientID, actorID, timestamp)}
}

func (_c *Repository_AddLike_Call) Run(run func(ctx context.Context, recipientID string, actorID string, timestamp int64)) *Repository_AddLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *Repository_AddLike_Call) Return(_a0 error) *Repository_AddLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_AddLike_Call) RunAndReturn(run func(context.Context, string, string, int64) error) *Repository_AddLike_Call {
	_c.Call.Return(run)
	return _c
}

// CountLikes provides a mock function with given fields: ctx, recipientID
func (_m *Repository) CountLikes(ctx context.Context, recipientID string) (int64, error) {
	ret := _m.Called(ctx, recipientID)

	if len(ret) == 0 {
		panic("no return value specified for CountLikes")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, recipientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, recipientID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, recipientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CountLikes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountLikes'
type Repository_CountLikes_Call struct {
	*mock.Call
}

// CountLikes is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
func (_e *Repository_Expecter) CountLikes(ctx interface{}, recipientID interface{}) *Repository_CountLikes_Call {
	return &Repository_CountLikes_Call{Call: _e.mock.On("CountLikes", ctx, recipientID)}
}

func (_c *Repository_CountLikes_Call) Run(run func(ctx context.Context, recipientID string)) *Repository_CountLikes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_CountLikes_Call) Return(_a0 int64, _a1 error) *Repository_CountLikes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CountLikes_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *Repository_CountLikes_Call {
	_c.Call.Return(run)
	return _c
}

// GetLikers provides a mock function with given fields: ctx, recipientID, paginationToken
func (_m *Repository) GetLikers(ctx context.Context, recipientID string, paginationToken string) ([]v9.Z, string, error) {
	ret := _m.Called(ctx, recipientID, paginationToken)

	if len(ret) == 0 {
		panic("no return value specified for GetLikers")
	}

	var r0 []v9.Z
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]v9.Z, string, error)); ok {
		return rf(ctx, recipientID, paginationToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []v9.Z); ok {
		r0 = rf(ctx, recipientID, paginationToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v9.Z)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, recipientID, paginationToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, recipientID, paginationToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_GetLikers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLikers'
type Repository_GetLikers_Call struct {
	*mock.Call
}

// GetLikers is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - paginationToken string
func (_e *Repository_Expecter) GetLikers(ctx interface{}, recipientID interface{}, paginationToken interface{}) *Repository_GetLikers_Call {
	return &Repository_GetLikers_Call{Call: _e.mock.On("GetLikers", ctx, recipientID, paginationToken)}
}

func (_c *Repository_GetLikers_Call) Run(run func(ctx context.Context, recipientID string, paginationToken string)) *Repository_GetLikers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_GetLikers_Call) Return(_a0 []v9.Z, _a1 string, _a2 error) *Repository_GetLikers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Repository_GetLikers_Call) RunAndReturn(run func(context.Context, string, string) ([]v9.Z, string, error)) *Repository_GetLikers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLike provides a mock function with given fields: ctx, recipientID, actorID
func (_m *Repository) RemoveLike(ctx context.Context, recipientID string, actorID string) error {
	ret := _m.Called(ctx, recipientID, actorID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, recipientID, actorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLike'
type Repository_RemoveLike_Call struct {
	*mock.Call
}

// RemoveLike is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - actorID string
func (_e *Repository_Expecter) RemoveLike(ctx interface{}, recipientID interface{}, actorID interface{}) *Repository_RemoveLike_Call {
	return &Repository_RemoveLike_Call{Call: _e.mock.On("RemoveLike", ctx, recipientID, actorID)}
}

func (_c *Repository_RemoveLike_Call) Run(run func(ctx context.Context, recipientID string, actorID string)) *Repository_RemoveLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_RemoveLike_Call) Return(_a0 error) *Repository_RemoveLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RemoveLike_Call) RunAndReturn(run func(context.Context, string, string) error) *Repository_RemoveLike_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
