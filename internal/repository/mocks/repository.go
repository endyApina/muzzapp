// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/endyapina/muzzapp/proto/gen/muzzapp/proto"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CheckMutualLike provides a mock function with given fields: ctx, actorID, recipientID
func (_m *Repository) CheckMutualLike(ctx context.Context, actorID string, recipientID string) (bool, error) {
	ret := _m.Called(ctx, actorID, recipientID)

	if len(ret) == 0 {
		panic("no return value specified for CheckMutualLike")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, actorID, recipientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, actorID, recipientID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, actorID, recipientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CheckMutualLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMutualLike'
type Repository_CheckMutualLike_Call struct {
	*mock.Call
}

// CheckMutualLike is a helper method to define mock.On call
//   - ctx context.Context
//   - actorID string
//   - recipientID string
func (_e *Repository_Expecter) CheckMutualLike(ctx interface{}, actorID interface{}, recipientID interface{}) *Repository_CheckMutualLike_Call {
	return &Repository_CheckMutualLike_Call{Call: _e.mock.On("CheckMutualLike", ctx, actorID, recipientID)}
}

func (_c *Repository_CheckMutualLike_Call) Run(run func(ctx context.Context, actorID string, recipientID string)) *Repository_CheckMutualLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_CheckMutualLike_Call) Return(_a0 bool, _a1 error) *Repository_CheckMutualLike_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CheckMutualLike_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *Repository_CheckMutualLike_Call {
	_c.Call.Return(run)
	return _c
}

// CountLikes provides a mock function with given fields: ctx, recipientID
func (_m *Repository) CountLikes(ctx context.Context, recipientID string) (uint64, error) {
	ret := _m.Called(ctx, recipientID)

	if len(ret) == 0 {
		panic("no return value specified for CountLikes")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(ctx, recipientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, recipientID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, recipientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CountLikes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountLikes'
type Repository_CountLikes_Call struct {
	*mock.Call
}

// CountLikes is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
func (_e *Repository_Expecter) CountLikes(ctx interface{}, recipientID interface{}) *Repository_CountLikes_Call {
	return &Repository_CountLikes_Call{Call: _e.mock.On("CountLikes", ctx, recipientID)}
}

func (_c *Repository_CountLikes_Call) Run(run func(ctx context.Context, recipientID string)) *Repository_CountLikes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_CountLikes_Call) Return(_a0 uint64, _a1 error) *Repository_CountLikes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CountLikes_Call) RunAndReturn(run func(context.Context, string) (uint64, error)) *Repository_CountLikes_Call {
	_c.Call.Return(run)
	return _c
}

// GetLikers provides a mock function with given fields: ctx, recipientID, paginationToken
func (_m *Repository) GetLikers(ctx context.Context, recipientID string, paginationToken string) ([]proto.ListLikedYouResponse_Liker, string, error) {
	ret := _m.Called(ctx, recipientID, paginationToken)

	if len(ret) == 0 {
		panic("no return value specified for GetLikers")
	}

	var r0 []proto.ListLikedYouResponse_Liker
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]proto.ListLikedYouResponse_Liker, string, error)); ok {
		return rf(ctx, recipientID, paginationToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []proto.ListLikedYouResponse_Liker); ok {
		r0 = rf(ctx, recipientID, paginationToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]proto.ListLikedYouResponse_Liker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, recipientID, paginationToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, recipientID, paginationToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_GetLikers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLikers'
type Repository_GetLikers_Call struct {
	*mock.Call
}

// GetLikers is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - paginationToken string
func (_e *Repository_Expecter) GetLikers(ctx interface{}, recipientID interface{}, paginationToken interface{}) *Repository_GetLikers_Call {
	return &Repository_GetLikers_Call{Call: _e.mock.On("GetLikers", ctx, recipientID, paginationToken)}
}

func (_c *Repository_GetLikers_Call) Run(run func(ctx context.Context, recipientID string, paginationToken string)) *Repository_GetLikers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_GetLikers_Call) Return(_a0 []proto.ListLikedYouResponse_Liker, _a1 string, _a2 error) *Repository_GetLikers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Repository_GetLikers_Call) RunAndReturn(run func(context.Context, string, string) ([]proto.ListLikedYouResponse_Liker, string, error)) *Repository_GetLikers_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewLikers provides a mock function with given fields: ctx, recipientID, paginationToken
func (_m *Repository) GetNewLikers(ctx context.Context, recipientID string, paginationToken string) ([]proto.ListLikedYouResponse_Liker, string, error) {
	ret := _m.Called(ctx, recipientID, paginationToken)

	if len(ret) == 0 {
		panic("no return value specified for GetNewLikers")
	}

	var r0 []proto.ListLikedYouResponse_Liker
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]proto.ListLikedYouResponse_Liker, string, error)); ok {
		return rf(ctx, recipientID, paginationToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []proto.ListLikedYouResponse_Liker); ok {
		r0 = rf(ctx, recipientID, paginationToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]proto.ListLikedYouResponse_Liker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, recipientID, paginationToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, recipientID, paginationToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_GetNewLikers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewLikers'
type Repository_GetNewLikers_Call struct {
	*mock.Call
}

// GetNewLikers is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - paginationToken string
func (_e *Repository_Expecter) GetNewLikers(ctx interface{}, recipientID interface{}, paginationToken interface{}) *Repository_GetNewLikers_Call {
	return &Repository_GetNewLikers_Call{Call: _e.mock.On("GetNewLikers", ctx, recipientID, paginationToken)}
}

func (_c *Repository_GetNewLikers_Call) Run(run func(ctx context.Context, recipientID string, paginationToken string)) *Repository_GetNewLikers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_GetNewLikers_Call) Return(_a0 []proto.ListLikedYouResponse_Liker, _a1 string, _a2 error) *Repository_GetNewLikers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Repository_GetNewLikers_Call) RunAndReturn(run func(context.Context, string, string) ([]proto.ListLikedYouResponse_Liker, string, error)) *Repository_GetNewLikers_Call {
	_c.Call.Return(run)
	return _c
}

// HasRecipientLikedActor provides a mock function with given fields: ctx, recipientID, actorID
func (_m *Repository) HasRecipientLikedActor(ctx context.Context, recipientID string, actorID string) (bool, error) {
	ret := _m.Called(ctx, recipientID, actorID)

	if len(ret) == 0 {
		panic("no return value specified for HasRecipientLikedActor")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, recipientID, actorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, recipientID, actorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, recipientID, actorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_HasRecipientLikedActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasRecipientLikedActor'
type Repository_HasRecipientLikedActor_Call struct {
	*mock.Call
}

// HasRecipientLikedActor is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - actorID string
func (_e *Repository_Expecter) HasRecipientLikedActor(ctx interface{}, recipientID interface{}, actorID interface{}) *Repository_HasRecipientLikedActor_Call {
	return &Repository_HasRecipientLikedActor_Call{Call: _e.mock.On("HasRecipientLikedActor", ctx, recipientID, actorID)}
}

func (_c *Repository_HasRecipientLikedActor_Call) Run(run func(ctx context.Context, recipientID string, actorID string)) *Repository_HasRecipientLikedActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_HasRecipientLikedActor_Call) Return(_a0 bool, _a1 error) *Repository_HasRecipientLikedActor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_HasRecipientLikedActor_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *Repository_HasRecipientLikedActor_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertDecision provides a mock function with given fields: ctx, actorID, recipientID, liked
func (_m *Repository) UpsertDecision(ctx context.Context, actorID string, recipientID string, liked bool) error {
	ret := _m.Called(ctx, actorID, recipientID, liked)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDecision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, actorID, recipientID, liked)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpsertDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertDecision'
type Repository_UpsertDecision_Call struct {
	*mock.Call
}

// UpsertDecision is a helper method to define mock.On call
//   - ctx context.Context
//   - actorID string
//   - recipientID string
//   - liked bool
func (_e *Repository_Expecter) UpsertDecision(ctx interface{}, actorID interface{}, recipientID interface{}, liked interface{}) *Repository_UpsertDecision_Call {
	return &Repository_UpsertDecision_Call{Call: _e.mock.On("UpsertDecision", ctx, actorID, recipientID, liked)}
}

func (_c *Repository_UpsertDecision_Call) Run(run func(ctx context.Context, actorID string, recipientID string, liked bool)) *Repository_UpsertDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *Repository_UpsertDecision_Call) Return(_a0 error) *Repository_UpsertDecision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpsertDecision_Call) RunAndReturn(run func(context.Context, string, string, bool) error) *Repository_UpsertDecision_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
